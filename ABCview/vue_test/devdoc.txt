sankey需要什么样的数据，函数对数据做了什么样的处理？
20:44：
barchart：数据
两个list，encode，height，avg？
top-20 accuracy,
句子list，给出accuracy，
所有句子，top-20 accuracy求平均。
em是什么？这类句子em

是否需要多个后端接口？...在global打开

23:26：
数据处理，修改后端。需要：
数据的格式:
{
  "links": [
    {
      "source": "who_p", 
      "target": "is_c", 
      "value": 1308
    }, 
    {
      "source": "who_p", 
      "target": "played_c", 
      "value": 1308
    }
  ], 
  "nodes": [
    {
      "name": "", 
      "node": "_c"
    }, 
    {
      "name": "where", 
      "node": "where_p"
    }
  ]
}

需要给links编号吗？
找到link后，
获得不要用index吧...就是source，target，建议文件统一，传入字符后根据tree找到每个child的sen_id,

[
  {
    "children": [
      {
        "name": "is", 
        "senId": [
          6, 
          18, 
          22], 
        "size": 169, 
        "val": 0.4764688251447061
      }, 
      {
        "name": "played", 
        "senId": [
          35, 
          131],
           
        "size": 125, 
        "val": 0.49229586651942636
      }],
    "name": "who", 
    "senId": [
      0, 
      5],
        "size": 169, 
        "val": 0.4764688251447061
      },
      {}
]

需要

关于树对齐...
就是比较retriver和reader的树
可选：top-k，threshold，layer
reader已有
retriver，同样的方法放进q和cxt即可。
问题在于这个answer，来自于投入50个相关文档的结果。然后
(layer,psg_num,seq_len)
reader和reranker同时进行，那么这是未经reranker的数据。

重新建一个.vue,文件把树对齐...

{
  "all_layer_node_link": [
    {
      "maxLayer": 0, 
      "node_link": {
        "links": [
          {
            "layer": 0.0, 
            "source": "65", 
            "target": "66", 
            "value": 0.6993105449532755
          }, 
          {
            "layer": 0.0, 
            "source": "69", 
            "target": "66", 
            "value": 0.700450004048245
          }
        ], 
        "nodes": [
          {
            "name": "on", 
            "node": "65", 
            "saliency": 0.004550366662442684
          }, 
          {
            "name": "may", 
            "node": "66", 
            "saliency": 0.0003601400530897081
          }, 
          {
            "name": "2018", 
            "node": "69", 
            "saliency": 0.08578912168741226
          }
        ]
      }, 
      "threshold": 0.5
    }
    {
      "maxLayer": 11, 
      "node_link": {
        "links": [
          {
            "layer": 7.0, 
            "source": "4", 
            "target": "2", 
            "value": 0.7651232084733518
          }, 
          {
            "layer": 5.0, 
            "source": "1", 
            "target": "2", 
            "value": 0.5766955751576578
          }
        ], 
        "nodes": [
          {
            "name": "[CLS]", 
            "node": "0", 
            "saliency": 0.0031466817017644644
          }, 
          {
            "name": "when", 
            "node": "1", 
            "saliency": -0.09067223221063614
          }
        ]
      }, 
      "threshold": 0.5
    }
  ], 
  "sentence_span": [
    0, 
    0, 
    0, 
    0, 
  ], 
  "tokenPool": [
    0, 
    1, 
    2, 
    3, 
  ], 
  "tree_height": [
    1, 
    2,
  ]
}
实现：4棵树的对齐：
要少熬夜啊喂
整理出四棵树的统一数据，根据
获得tokenpool,后端处理整个tokenpool
tree_height:{
  q:
  cxt:
  reranker:
  reader
}

时间控制：
que提速明显0:17
为了方便起见把retriver合并
现在就去把ctx合并了...
打开20个文件，对于每一层，后取出层数对应的二维数组按深度拼接后再次按深度拼接

13:35
连线：
从link的中间到rect中间
15:29
que table

20:22:
选link，filter sentence id，post，get que

解决显示的问题：
父级组件：

前端：
关于12层显示的问题，，，
换一个选择框，
post：que/ctx/reader/reranker/ threshold 

依赖：文件名，区分，以及k

搞清生命周期
我需要在画图前拿到数据，画图是在拿到服务器数据后，服务器数据在post后，post在init中，init在mount时，所以询问：mount前时可以把data传到吗，在beforeCreat里面有一个监听，仅仅改变数据，但是此时恐怕并没有data这个东西
有些东西不确定，一定要搞清楚，初始值要设好
此时点击需要监听到后调用方法
接着选择

完成视图转换：
两个视图与其它组件：que、ctx、
区别：thre,
v-if 没有create,
初始情况：渲染12层，使用初始data
button 变动改变父组件的值（emit
在layer中，thre变动更新tree，也就是经典的emit，update
变动到single后，single 此时父组件已经保存了que，ctx，的值这些需要提前放进single，也就是 ，可能是用props 这个先待定。
有个问题：model变化的监听到底是谁，
在layer view点击就是layer view变化，在model view点击就是，我先使用父组件管理。